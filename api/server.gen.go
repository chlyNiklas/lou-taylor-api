// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for GetEventsParamsStatus.
const (
	Past     GetEventsParamsStatus = "past"
	Upcoming GetEventsParamsStatus = "upcoming"
)

// Event defines model for Event.
type Event struct {
	// Description Details about the lunch event
	Description *string `json:"description,omitempty"`

	// Id Unique UUID identifier for the event
	Id openapi_types.UUID `json:"id"`

	// ImageUrl URL of the  image file
	ImageUrl string `json:"imageUrl"`

	// Place The location where the lunch will take place
	Place string `json:"place"`

	// Time The date and time when the event is going to happen
	Time *time.Time `json:"time,omitempty"`

	// Title The title of the lunch event
	Title string `json:"title"`
}

// Login defines model for Login.
type Login struct {
	// Password The password for authentication
	Password string `json:"password"`

	// Username The username for authentication
	Username string `json:"username"`
}

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	// Status Filter events by their status (past or upcoming)
	Status *GetEventsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// GetEventsParamsStatus defines parameters for GetEvents.
type GetEventsParamsStatus string

// PostEventsJSONBody defines parameters for PostEvents.
type PostEventsJSONBody struct {
	// Description Additional details about the lunch event
	Description *string `json:"description,omitempty"`

	// Image Link to the image
	Image *string `json:"image,omitempty"`

	// Place The location where the lunch will take place
	Place string `json:"place"`

	// Time The date and time when the event will occur
	Time *time.Time `json:"time,omitempty"`

	// Title The title of the lunch event
	Title string `json:"title"`
}

// PutEventsEventIdMultipartBody defines parameters for PutEventsEventId.
type PutEventsEventIdMultipartBody struct {
	// Description Additional details about the lunch event
	Description *string `json:"description,omitempty"`

	// Image An optional image file for the event
	Image *openapi_types.File `json:"image,omitempty"`

	// Place The location where the lunch will take place
	Place string `json:"place"`

	// Title The title of the lunch event
	Title string `json:"title"`
}

// PostImagesMultipartBody defines parameters for PostImages.
type PostImagesMultipartBody struct {
	// Image The image file to upload
	Image openapi_types.File `json:"image"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = Login

// PostEventsJSONRequestBody defines body for PostEvents for application/json ContentType.
type PostEventsJSONRequestBody PostEventsJSONBody

// PutEventsEventIdMultipartRequestBody defines body for PutEventsEventId for multipart/form-data ContentType.
type PutEventsEventIdMultipartRequestBody PutEventsEventIdMultipartBody

// PostImagesMultipartRequestBody defines body for PostImages for multipart/form-data ContentType.
type PostImagesMultipartRequestBody PostImagesMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user
	// (POST /auth/login)
	PostAuthLogin(w http.ResponseWriter, r *http.Request)
	// Get all lunch events
	// (GET /events)
	GetEvents(w http.ResponseWriter, r *http.Request, params GetEventsParams)
	// Create a new lunch event
	// (POST /events)
	PostEvents(w http.ResponseWriter, r *http.Request)
	// Delete a specific lunch event (authenticated)
	// (DELETE /events/{eventId})
	DeleteEventsEventId(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID)
	// Get a specific lunch event
	// (GET /events/{eventId})
	GetEventsEventId(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID)
	// Update a specific lunch event (authenticated)
	// (PUT /events/{eventId})
	PutEventsEventId(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID)
	// Upload an image
	// (POST /images)
	PostImages(w http.ResponseWriter, r *http.Request)
	// Delete an image
	// (DELETE /images/{imageName})
	DeleteImagesImageName(w http.ResponseWriter, r *http.Request, imageName string)
	// Retrieve an image
	// (GET /images/{imageName})
	GetImagesImageName(w http.ResponseWriter, r *http.Request, imageName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostEvents operation middleware
func (siw *ServerInterfaceWrapper) PostEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"admin"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEvents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEventsEventId operation middleware
func (siw *ServerInterfaceWrapper) DeleteEventsEventId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", mux.Vars(r)["eventId"], &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"admin"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEventsEventId(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEventsEventId operation middleware
func (siw *ServerInterfaceWrapper) GetEventsEventId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", mux.Vars(r)["eventId"], &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventsEventId(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutEventsEventId operation middleware
func (siw *ServerInterfaceWrapper) PutEventsEventId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "eventId" -------------
	var eventId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "eventId", mux.Vars(r)["eventId"], &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "eventId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"admin"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutEventsEventId(w, r, eventId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostImages operation middleware
func (siw *ServerInterfaceWrapper) PostImages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"admin"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostImages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteImagesImageName operation middleware
func (siw *ServerInterfaceWrapper) DeleteImagesImageName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "imageName" -------------
	var imageName string

	err = runtime.BindStyledParameterWithOptions("simple", "imageName", mux.Vars(r)["imageName"], &imageName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imageName", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"admin"})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteImagesImageName(w, r, imageName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetImagesImageName operation middleware
func (siw *ServerInterfaceWrapper) GetImagesImageName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "imageName" -------------
	var imageName string

	err = runtime.BindStyledParameterWithOptions("simple", "imageName", mux.Vars(r)["imageName"], &imageName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imageName", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetImagesImageName(w, r, imageName)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/auth/login", wrapper.PostAuthLogin).Methods("POST")

	r.HandleFunc(options.BaseURL+"/events", wrapper.GetEvents).Methods("GET")

	r.HandleFunc(options.BaseURL+"/events", wrapper.PostEvents).Methods("POST")

	r.HandleFunc(options.BaseURL+"/events/{eventId}", wrapper.DeleteEventsEventId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/events/{eventId}", wrapper.GetEventsEventId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/events/{eventId}", wrapper.PutEventsEventId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/images", wrapper.PostImages).Methods("POST")

	r.HandleFunc(options.BaseURL+"/images/{imageName}", wrapper.DeleteImagesImageName).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/images/{imageName}", wrapper.GetImagesImageName).Methods("GET")

	return r
}

type PostAuthLoginRequestObject struct {
	Body *PostAuthLoginJSONRequestBody
}

type PostAuthLoginResponseObject interface {
	VisitPostAuthLoginResponse(w http.ResponseWriter) error
}

type PostAuthLogin200JSONResponse struct {
	// Token JWT token to be used for authenticated requests
	Token *string `json:"token,omitempty"`
}

func (response PostAuthLogin200JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin401Response struct {
}

func (response PostAuthLogin401Response) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetEventsRequestObject struct {
	Params GetEventsParams
}

type GetEventsResponseObject interface {
	VisitGetEventsResponse(w http.ResponseWriter) error
}

type GetEvents200JSONResponse []Event

func (response GetEvents200JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsRequestObject struct {
	Body *PostEventsJSONRequestBody
}

type PostEventsResponseObject interface {
	VisitPostEventsResponse(w http.ResponseWriter) error
}

type PostEvents201JSONResponse Event

func (response PostEvents201JSONResponse) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostEvents400Response struct {
}

func (response PostEvents400Response) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteEventsEventIdRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
}

type DeleteEventsEventIdResponseObject interface {
	VisitDeleteEventsEventIdResponse(w http.ResponseWriter) error
}

type DeleteEventsEventId204Response struct {
}

func (response DeleteEventsEventId204Response) VisitDeleteEventsEventIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEventsEventId401Response struct {
}

func (response DeleteEventsEventId401Response) VisitDeleteEventsEventIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteEventsEventId404Response struct {
}

func (response DeleteEventsEventId404Response) VisitDeleteEventsEventIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetEventsEventIdRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
}

type GetEventsEventIdResponseObject interface {
	VisitGetEventsEventIdResponse(w http.ResponseWriter) error
}

type GetEventsEventId200JSONResponse Event

func (response GetEventsEventId200JSONResponse) VisitGetEventsEventIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsEventId404Response struct {
}

func (response GetEventsEventId404Response) VisitGetEventsEventIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutEventsEventIdRequestObject struct {
	EventId openapi_types.UUID `json:"eventId"`
	Body    *multipart.Reader
}

type PutEventsEventIdResponseObject interface {
	VisitPutEventsEventIdResponse(w http.ResponseWriter) error
}

type PutEventsEventId200JSONResponse Event

func (response PutEventsEventId200JSONResponse) VisitPutEventsEventIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutEventsEventId400Response struct {
}

func (response PutEventsEventId400Response) VisitPutEventsEventIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutEventsEventId401Response struct {
}

func (response PutEventsEventId401Response) VisitPutEventsEventIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutEventsEventId404Response struct {
}

func (response PutEventsEventId404Response) VisitPutEventsEventIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostImagesRequestObject struct {
	Body *multipart.Reader
}

type PostImagesResponseObject interface {
	VisitPostImagesResponse(w http.ResponseWriter) error
}

type PostImages201JSONResponse struct {
	// ImageUrl URL of the uploaded image
	ImageUrl *string `json:"imageUrl,omitempty"`
}

func (response PostImages201JSONResponse) VisitPostImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostImages400Response struct {
}

func (response PostImages400Response) VisitPostImagesResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteImagesImageNameRequestObject struct {
	ImageName string `json:"imageName"`
}

type DeleteImagesImageNameResponseObject interface {
	VisitDeleteImagesImageNameResponse(w http.ResponseWriter) error
}

type DeleteImagesImageName204Response struct {
}

func (response DeleteImagesImageName204Response) VisitDeleteImagesImageNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteImagesImageName404Response struct {
}

func (response DeleteImagesImageName404Response) VisitDeleteImagesImageNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetImagesImageNameRequestObject struct {
	ImageName string `json:"imageName"`
}

type GetImagesImageNameResponseObject interface {
	VisitGetImagesImageNameResponse(w http.ResponseWriter) error
}

type GetImagesImageName200ImagewebpResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetImagesImageName200ImagewebpResponse) VisitGetImagesImageNameResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/webp")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetImagesImageName404Response struct {
}

func (response GetImagesImageName404Response) VisitGetImagesImageNameResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Log in a user
	// (POST /auth/login)
	PostAuthLogin(ctx context.Context, request PostAuthLoginRequestObject) (PostAuthLoginResponseObject, error)
	// Get all lunch events
	// (GET /events)
	GetEvents(ctx context.Context, request GetEventsRequestObject) (GetEventsResponseObject, error)
	// Create a new lunch event
	// (POST /events)
	PostEvents(ctx context.Context, request PostEventsRequestObject) (PostEventsResponseObject, error)
	// Delete a specific lunch event (authenticated)
	// (DELETE /events/{eventId})
	DeleteEventsEventId(ctx context.Context, request DeleteEventsEventIdRequestObject) (DeleteEventsEventIdResponseObject, error)
	// Get a specific lunch event
	// (GET /events/{eventId})
	GetEventsEventId(ctx context.Context, request GetEventsEventIdRequestObject) (GetEventsEventIdResponseObject, error)
	// Update a specific lunch event (authenticated)
	// (PUT /events/{eventId})
	PutEventsEventId(ctx context.Context, request PutEventsEventIdRequestObject) (PutEventsEventIdResponseObject, error)
	// Upload an image
	// (POST /images)
	PostImages(ctx context.Context, request PostImagesRequestObject) (PostImagesResponseObject, error)
	// Delete an image
	// (DELETE /images/{imageName})
	DeleteImagesImageName(ctx context.Context, request DeleteImagesImageNameRequestObject) (DeleteImagesImageNameResponseObject, error)
	// Retrieve an image
	// (GET /images/{imageName})
	GetImagesImageName(ctx context.Context, request GetImagesImageNameRequestObject) (GetImagesImageNameResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAuthLogin operation middleware
func (sh *strictHandler) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	var request PostAuthLoginRequestObject

	var body PostAuthLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogin(ctx, request.(PostAuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAuthLoginResponseObject); ok {
		if err := validResponse.VisitPostAuthLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEvents operation middleware
func (sh *strictHandler) GetEvents(w http.ResponseWriter, r *http.Request, params GetEventsParams) {
	var request GetEventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvents(ctx, request.(GetEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsResponseObject); ok {
		if err := validResponse.VisitGetEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEvents operation middleware
func (sh *strictHandler) PostEvents(w http.ResponseWriter, r *http.Request) {
	var request PostEventsRequestObject

	var body PostEventsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostEvents(ctx, request.(PostEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostEventsResponseObject); ok {
		if err := validResponse.VisitPostEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEventsEventId operation middleware
func (sh *strictHandler) DeleteEventsEventId(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID) {
	var request DeleteEventsEventIdRequestObject

	request.EventId = eventId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEventsEventId(ctx, request.(DeleteEventsEventIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEventsEventId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEventsEventIdResponseObject); ok {
		if err := validResponse.VisitDeleteEventsEventIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsEventId operation middleware
func (sh *strictHandler) GetEventsEventId(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID) {
	var request GetEventsEventIdRequestObject

	request.EventId = eventId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsEventId(ctx, request.(GetEventsEventIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsEventId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsEventIdResponseObject); ok {
		if err := validResponse.VisitGetEventsEventIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutEventsEventId operation middleware
func (sh *strictHandler) PutEventsEventId(w http.ResponseWriter, r *http.Request, eventId openapi_types.UUID) {
	var request PutEventsEventIdRequestObject

	request.EventId = eventId

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutEventsEventId(ctx, request.(PutEventsEventIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutEventsEventId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutEventsEventIdResponseObject); ok {
		if err := validResponse.VisitPutEventsEventIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostImages operation middleware
func (sh *strictHandler) PostImages(w http.ResponseWriter, r *http.Request) {
	var request PostImagesRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostImages(ctx, request.(PostImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostImages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostImagesResponseObject); ok {
		if err := validResponse.VisitPostImagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteImagesImageName operation middleware
func (sh *strictHandler) DeleteImagesImageName(w http.ResponseWriter, r *http.Request, imageName string) {
	var request DeleteImagesImageNameRequestObject

	request.ImageName = imageName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteImagesImageName(ctx, request.(DeleteImagesImageNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteImagesImageName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteImagesImageNameResponseObject); ok {
		if err := validResponse.VisitDeleteImagesImageNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetImagesImageName operation middleware
func (sh *strictHandler) GetImagesImageName(w http.ResponseWriter, r *http.Request, imageName string) {
	var request GetImagesImageNameRequestObject

	request.ImageName = imageName

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetImagesImageName(ctx, request.(GetImagesImageNameRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetImagesImageName")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetImagesImageNameResponseObject); ok {
		if err := validResponse.VisitGetImagesImageNameResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qrhXbTdV257ifqfn1uv/BwAA//8n96+JKh4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
